<!DOCTYPE html>
<head>
    <title>hey</title>
    <style>
        * {
            margin: 0;
            padding: 0;
        }

        html {
            overflow: hidden;
        }
    </style>
</head>
<html>
<body>
    #parse("static/headforcunstruct.vm")
<script>

    sbVertexShader = [
        "varying vec3 vWorldPosition;",
        "void main() {",
        "  vec4 worldPosition = modelMatrix * vec4( position, 1.0 );",
        "  vWorldPosition = worldPosition.xyz;",
        "  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",
        "}",
    ].join("\n");

    sbFragmentShader = [
        "uniform vec3 topColor;",
        "uniform vec3 bottomColor;",
        "uniform float offset;",
        "uniform float exponent;",
        "varying vec3 vWorldPosition;",
        "void main() {",
        "  float h = normalize( vWorldPosition + offset ).y;",
        "  gl_FragColor = vec4( mix( bottomColor, topColor, max( pow( h, exponent ), 0.0 ) ), 1.0 );",
        "}",
    ].join("\n");

    var smetaProject = {
        scene: null, camera: null, renderer: null,
        container: null, controls: null,
        clock: null, stats: null,
        plane: null, selection: null, offset: new THREE.Vector3(), objects: [],
        raycaster: new THREE.Raycaster(),

        init: function () {

            // Create main scene
            this.scene = new THREE.Scene();
            this.scene.fog = new THREE.FogExp2(0xcce0ff, 0.0003);

            var SCREEN_WIDTH = window.innerWidth, SCREEN_HEIGHT = window.innerHeight;

            // Prepare perspective camera
            var VIEW_ANGLE = 45, ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT, NEAR = 1, FAR = 1000;
            this.camera = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);
            this.scene.add(this.camera);
            this.camera.position.set(100, 0, 0);
            this.camera.lookAt(new THREE.Vector3(0, 0, 0));

            // Prepare webgl renderer
            this.renderer = new THREE.WebGLRenderer({antialias: true});
            this.renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
            this.renderer.setClearColor(this.scene.fog.color);

            // Prepare container
            this.container = document.createElement('div');
            document.body.appendChild(this.container);
            this.container.appendChild(this.renderer.domElement);

            // Events
            THREEx.WindowResize(this.renderer, this.camera);
            document.addEventListener('mousedown', this.onDocumentMouseDown, false);
            document.addEventListener('mousemove', this.onDocumentMouseMove, false);
            document.addEventListener('mouseup', this.onDocumentMouseUp, false);
            document.addEventListener('keypress', this.onKeyPress, false);
            // Prepare Orbit controls
            this.controls = new THREE.OrbitControls(this.camera);
            this.controls.target = new THREE.Vector3(0, 0, 0);
            this.controls.maxDistance = 150;

            // Prepare clock
            this.clock = new THREE.Clock();

            // Prepare stats
            this.stats = new Stats();
            this.stats.domElement.style.position = 'absolute';
            this.stats.domElement.style.left = '50px';
            this.stats.domElement.style.bottom = '50px';
            this.stats.domElement.style.zIndex = 1;
            this.container.appendChild(this.stats.domElement);

            // Add lights
            this.scene.add(new THREE.AmbientLight(0x444444));

            var dirLight = new THREE.DirectionalLight(0xffffff);
            dirLight.position.set(200, 200, 1000).normalize();
            this.camera.add(dirLight);
            this.camera.add(dirLight.target);

            // Display skybox
            this.addSkybox();

            // Plane, that helps to determinate an intersection position
            this.plane = new THREE.Mesh(new THREE.PlaneBufferGeometry(500, 500, 8, 8), new THREE.MeshBasicMaterial({color: 0xffffff}));
            this.plane.visible = false;
            this.scene.add(this.plane);

            // Add 100 random objects (spheres)

        },
        addSkybox: function () {
            var iSBrsize = 500;
            var uniforms = {
                topColor: {type: "c", value: new THREE.Color(0x0077ff)},
                bottomColor: {type: "c", value: new THREE.Color(0xffffff)},
                offset: {type: "f", value: iSBrsize},
                exponent: {type: "f", value: 1.5}
            }

            var skyGeo = new THREE.SphereGeometry(iSBrsize, 32, 32);
            skyMat = new THREE.ShaderMaterial({
                vertexShader: sbVertexShader,
                fragmentShader: sbFragmentShader,
                uniforms: uniforms,
                side: THREE.DoubleSide,
                fog: false
            });
            skyMesh = new THREE.Mesh(skyGeo, skyMat);
            this.scene.add(skyMesh);
        },
        onDocumentMouseDown: function (event) {
            // Get mouse position
            var mouseX = (event.clientX / window.innerWidth) * 2 - 1;
            var mouseY = -(event.clientY / window.innerHeight) * 2 + 1;

            // Get 3D vector from 3D mouse position using 'unproject' function
            var vector = new THREE.Vector3(mouseX, mouseY, 1);
            vector.unproject(smetaProject.camera);

            // Set the raycaster position
            smetaProject.raycaster.set(smetaProject.camera.position, vector.sub(smetaProject.camera.position).normalize());

            // Find all intersected objects
            var intersects = smetaProject.raycaster.intersectObjects(smetaProject.objects);

            if (intersects.length > 0) {
                // Disable the controls
                smetaProject.controls.enabled = false;

                // Set the selection - first intersected object
                smetaProject.selection = intersects[0].object;

                // Calculate the offset
                var intersects = smetaProject.raycaster.intersectObject(smetaProject.plane);
                smetaProject.offset.copy(intersects[0].point).sub(smetaProject.plane.position);
            }
        },
        onDocumentMouseMove: function (event) {
            event.preventDefault();

            // Get mouse position
            var mouseX = (event.clientX / window.innerWidth) * 2 - 1;
            var mouseY = -(event.clientY / window.innerHeight) * 2 + 1;

            // Get 3D vector from 3D mouse position using 'unproject' function
            var vector = new THREE.Vector3(mouseX, mouseY, 1);
            vector.unproject(smetaProject.camera);

            // Set the raycaster position
            smetaProject.raycaster.set(smetaProject.camera.position, vector.sub(smetaProject.camera.position).normalize());

            if (smetaProject.selection) {
                // Check the position where the plane is intersected
                var intersects = smetaProject.raycaster.intersectObject(smetaProject.plane);
                // Reposition the object based on the intersection point with the plane
                smetaProject.selection.position.copy(intersects[0].point.sub(smetaProject.offset));
            } else {
                // Update position of the plane if need
                var intersects = smetaProject.raycaster.intersectObjects(smetaProject.objects);
                if (intersects.length > 0) {
                    smetaProject.plane.position.copy(intersects[0].object.position);
                    smetaProject.plane.lookAt(smetaProject.camera.position);
                }
            }
        },
        onDocumentMouseUp: function (event) {
            // Enable the controls
            smetaProject.controls.enabled = true;
            smetaProject.selection = null;
        },
        onKeyPress: function (event) {
            if (event.keyCode == 65) {
                //add cube
                console.log(5);
                var object, material
                var objGeometry = new THREE.BoxGeometry(4, 4, 4);
                material = new THREE.MeshPhongMaterial({color: Math.random() * 0xffffff});
                material.transparent = true;
                object = new THREE.Mesh(objGeometry.clone(), material);
                object.scale.x = 1;
                object.scale.y = 1;
                object.scale.z = 1;
                smetaProject.objects.push(object);
                smetaProject.scene.add(object);
            }
        }
    };

    // Animate the scene
    function animate() {
        requestAnimationFrame(animate);
        render();
        update();
    }

    // Update controls and stats
    function update() {
        var delta = smetaProject.clock.getDelta();

        smetaProject.controls.update(delta);
        smetaProject.stats.update();
    }

    // Render the scene
    function render() {
        if (smetaProject.renderer) {
            smetaProject.renderer.render(smetaProject.scene, smetaProject.camera);
        }
    }

    // Initialize lesson on page load
    function initializeLesson() {
        smetaProject.init();
        animate();
    }

    if (window.addEventListener)
        window.addEventListener('load', initializeLesson, false);
    else if (window.attachEvent)
        window.attachEvent('onload', initializeLesson);
    else window.onload = initializeLesson;

</script>
</body>
</html>